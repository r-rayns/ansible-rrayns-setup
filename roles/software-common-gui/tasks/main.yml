---
# tasks file for software-common-gui
- name: Install optionals check
  pause:
    prompt: "Install all optionals? (yes/no)?"
  register: install_all_optionals

# KITTY TERMINAL INSTALL
- name: Install Kitty check
  pause:
    prompt: "Install kitty terminal (yes/no)?"
  register: install_kitty
  when: not install_all_optionals.user_input | bool

- name: Install Kitty terminal
  when: (install_all_optionals.user_input | bool) or
    (install_kitty.user_input | bool)
  block:
  
    - name: Download Kitty installer script
      get_url:
        url: https://sw.kovidgoyal.net/kitty/installer.sh
        dest: "/home/{{ default_user }}/installer.sh"
        mode: '0755'

    - name: Run Kitty installer script
      become: true
      become_user: "{{ default_user }}"
      shell: "~/installer.sh"

    - name: Ensure ~/.local/bin/ directory exists
      become: true
      become_user: "{{ default_user }}"
      file:
        path: "~/.local/bin/"
        state: directory

    - name: Create symbolic links for Kitty and Kitten executables
      become: true
      become_user: "{{ default_user }}"
      file:
        src: "~/.local/kitty.app/bin/{{ item }}"
        dest: "~/.local/bin/{{ item }}"
        state: link
      loop:
        - kitty
        - kitten

    - name: Copy the kitty.desktop file to ~/.local/share/applications so it can be found by the OS
      become: true
      become_user: "{{ default_user }}"
      copy:
        src: "/home/{{ default_user }}/.local/kitty.app/share/applications/kitty.desktop"
        dest: "/home/{{ default_user }}/.local/share/applications/"

    - name: Modify kitty.desktop with the correct icon path
      become: true
      become_user: "{{ default_user }}"
      replace:
        path: "~/.local/share/applications/kitty.desktop"
        regexp: 'Icon=kitty'
        replace: 'Icon=/home/{{ default_user }}/.local/kitty.app/share/icons/hicolor/256x256/apps/kitty.png'

    - name: Modify kitty.desktop with the correct exec path
      become: true
      become_user: "{{ default_user }}"
      replace:
        path: "~/.local/share/applications/kitty.desktop"
        regexp: 'Exec=kitty'
        replace: 'Exec=/home/{{ default_user }}/.local/kitty.app/bin/kitty'

    - name: Remove downloaded installer script
      become: true
      become_user: "{{ default_user }}"
      file:
        path: "~/installer.sh"
        state: absent

# CHROMIUM INSTALL
- name: Install Chromium check
  pause:
    prompt: "Install chromium-browser (yes/no)?"
  register: install_chromium
  when: not install_all_optionals.user_input | bool

- name: Install Chromium
  apt:
    pkg:
      - chromium-browser
  when: (install_all_optionals.user_input | bool) or
    (install_chromium.user_input | bool)

# VSCODE INSTALL
- name: Install Visual Studio Code check
  pause:
    prompt: "Install vscode (yes/no)?"
  register: install_vscode
  when: not install_all_optionals.user_input | bool

- name: Install Visual Studio Code
  snap:
    name: code
    classic: true
  when: (install_all_optionals.user_input | bool) or
    (install_vscode.user_input | bool)

- name: Post Visual Studio Code install
  debug:
    msg:
      - "To install the Ansible linter for vscode follow this guide:"
      - "https://github.com/ansible-community/vscode-ansible/blob/4925e3393ddce2554ac346a17a04118d668a609c/doc/topics/integrate_ansible-lint_in_venv/linux.md"
  when: (install_all_optionals.user_input | bool) or
    (install_vscode.user_input | bool)

# SPOTIFY INSTALL
- name: Install Spotify check
  pause:
    prompt: "Install Spotify (yes/no)?"
  register: install_spotify
  when: not install_all_optionals.user_input | bool

- name: Install Spotify
  snap:
    name: spotify
    classic: true
  when: (install_all_optionals.user_input | bool) or
    (install_spotify.user_input | bool)

# KEEPASSXC INSTALL
- name: Install KeepassXC check
  pause:
    prompt: "Install KeePassXC (yes/no)?"
  register: install_keepassxc
  when: not install_all_optionals.user_input | bool

- name: Install KeepassXC
  snap:
    name: keepassxc
    classic: true
  when: (install_all_optionals.user_input | bool) or
    (install_keepassxc.user_input | bool)

# KDENLIVE INSTALL
- name: Install Kdenlive check
  pause:
    prompt: "Install Kdenlive (yes/no)?"
  register: install_kdenlive
  when: not install_all_optionals.user_input | bool

- name: Install Kdenlive
  apt:
    pkg:
      - kdenlive
  when: (install_all_optionals.user_input | bool) or
    (install_kdenlive.user_input | bool)

# GIMP INSTALL
- name: Install GIMP check
  pause:
    prompt: "Install GIMP (yes/no)?"
  register: install_gimp
  when: not install_all_optionals.user_input | bool

- name: Install GIMP
  apt:
    pkg:
      - gimp
  when: (install_all_optionals.user_input | bool) or
    (install_gimp.user_input | bool)

# PEEK INSTALL
- name: Install Peek check
  pause:
    prompt: "Install Peek (yes/no)?"
  register: install_peek
  when: not install_all_optionals.user_input | bool

- name: Install Peek
  apt:
    pkg:
      - peek
  when: (install_all_optionals.user_input | bool) or
    (install_peek.user_input | bool)

# YAKUAKE INSTALL
- name: Install Yakuake check
  pause:
    prompt: "Install Yakuake (yes/no)?"
  register: install_yakuake
  when: not install_all_optionals.user_input | bool

- name: Install Yakuake
  apt:
    pkg:
      - yakuake
  when: (install_all_optionals.user_input | bool) or
    (install_yakuake.user_input | bool)

# INSOMNIA INSTALL
- name: Install Insomnia check
  pause:
    prompt: "Install Insomnia (yes/no)?"
  register: install_insomnia
  when: not install_all_optionals.user_input | bool

- name: Install Insomnia
  snap:
    name: insomnia
    classic: true
  when: (install_all_optionals.user_input | bool) or
    (install_insomnia.user_input | bool)
